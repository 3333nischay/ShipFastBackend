generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  email     String   @default("geektechnologies133@gmail.com")
  dbs       UserDB[]
}

model UserDB {
  id                String         @id @default(uuid())
  userId            String
  host              String
  port              Int
  dbType            String
  dbName            String
  username          String         @unique
  passwordEncrypted String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  monitoringEnabled Boolean        @default(false)
  user              User           @relation(fields: [userId], references: [id])
  queryLogs         QueryLog[]
  tableUsages       TableUsage[]
  topSlowQueries    TopSlowQuery[]
  top3Suggestions   Top3Suggestions?
}

model QueryLog {
  id            String   @id @default(uuid())
  userDbId      String
  query         String
  queryHash     String   @unique
  calls         Int      @default(0)
  totalTimeMs   Float    @default(0)
  meanTimeMs    Float    @default(0)
  rowsReturned  Int      @default(0)
  collectedAt   DateTime @default(now())
  alertsEnabled Boolean  @default(false)
  userDb        UserDB   @relation(fields: [userDbId], references: [id])
}

model TableUsage {
  id        String   @id @default(uuid())
  userDbId  String
  tableName String
  callCount Int      @default(0)
  lastUsed  DateTime @default(now())
  createdAt DateTime @default(now())
  userDb    UserDB   @relation(fields: [userDbId], references: [id])
}

model TopSlowQuery {
  id           String   @id @default(uuid())
  userDbId     String
  userId       String
  query        String
  calls        Int      @default(1)
  totalTimeMs  Float
  meanTimeMs   Float
  rowsReturned Int
  rank         Int
  collectedAt  DateTime @default(now())
  createdAt    DateTime @default(now())
  userDb       UserDB   @relation(fields: [userDbId], references: [id])
}

model TableStructure {
  id          String   @id
  userDbId    String
  tableName   String
  schemaName  String   @default("public")
  columns     Json
  primaryKeys Json
  foreignKeys Json
  indexes     Json
  rowCount    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@unique([userDbId, schemaName, tableName])
}

model Top3Suggestions {
  id          String   @id @default(uuid())
  userDbId    String   @unique
  suggestions Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userDb      UserDB   @relation(fields: [userDbId], references: [id])
}
